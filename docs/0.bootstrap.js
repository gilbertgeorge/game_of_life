(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/game_of_life.js":
/*!******************************!*\
  !*** ../pkg/game_of_life.js ***!
  \******************************/
/*! exports provided: __wbg_set_wasm, Cell, OrganismType, Universe, __wbg_new_abda76e883ba8a5f, __wbg_stack_658279fe44541cf6, __wbg_error_f851667af71bcfc6, __wbindgen_object_drop_ref, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game_of_life_bg.wasm */ \"../pkg/game_of_life_bg.wasm\");\n/* harmony import */ var _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game_of_life_bg.js */ \"../pkg/game_of_life_bg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_set_wasm\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_set_wasm\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Cell\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"Cell\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"OrganismType\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"OrganismType\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"Universe\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_abda76e883ba8a5f\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_new_abda76e883ba8a5f\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_658279fe44541cf6\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_stack_658279fe44541cf6\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_f851667af71bcfc6\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_error_f851667af71bcfc6\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_object_drop_ref\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return _game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_throw\"]; });\n\n\n\nObject(_game_of_life_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_set_wasm\"])(_game_of_life_bg_wasm__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n//# sourceURL=webpack:///../pkg/game_of_life.js?");

/***/ }),

/***/ "../pkg/game_of_life_bg.js":
/*!*********************************!*\
  !*** ../pkg/game_of_life_bg.js ***!
  \*********************************/
/*! exports provided: __wbg_set_wasm, Cell, OrganismType, Universe, __wbg_new_abda76e883ba8a5f, __wbg_stack_658279fe44541cf6, __wbg_error_f851667af71bcfc6, __wbindgen_object_drop_ref, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_set_wasm\", function() { return __wbg_set_wasm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cell\", function() { return Cell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OrganismType\", function() { return OrganismType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_abda76e883ba8a5f\", function() { return __wbg_new_abda76e883ba8a5f; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_658279fe44541cf6\", function() { return __wbg_stack_658279fe44541cf6; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_f851667af71bcfc6\", function() { return __wbg_error_f851667af71bcfc6; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n*/\nconst Cell = Object.freeze({ Dead:0,\"0\":\"Dead\",Alive:1,\"1\":\"Alive\", });\n/**\n*/\nconst OrganismType = Object.freeze({ Glider:0,\"0\":\"Glider\",Beacon:1,\"1\":\"Beacon\",Blinker:2,\"2\":\"Blinker\",Toad:3,\"3\":\"Toad\",GliderGun:4,\"4\":\"GliderGun\",HWSS:5,\"5\":\"HWSS\", });\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        const ret = wasm.universe_new();\n        return Universe.__wrap(ret);\n    }\n    /**\n    * @param {number} organism_type\n    * @param {number} row\n    * @param {number} column\n    */\n    generate_organism(organism_type, row, column) {\n        wasm.universe_generate_organism(this.ptr, organism_type, row, column);\n    }\n    /**\n    */\n    clear() {\n        wasm.universe_clear(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.universe_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        const ret = wasm.universe_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        const ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} row\n    * @param {number} column\n    * @returns {number}\n    */\n    get_cell(row, column) {\n        const ret = wasm.universe_get_cell(this.ptr, row, column);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} row\n    * @param {number} column\n    */\n    toggle_cell(row, column) {\n        wasm.universe_toggle_cell(this.ptr, row, column);\n    }\n    /**\n    * @param {number} row\n    * @param {number} column\n    */\n    fill_cell(row, column) {\n        wasm.universe_fill_cell(this.ptr, row, column);\n    }\n}\n\nfunction __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nfunction __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../www/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///../pkg/game_of_life_bg.js?");

/***/ }),

/***/ "../pkg/game_of_life_bg.wasm":
/*!***********************************!*\
  !*** ../pkg/game_of_life_bg.wasm ***!
  \***********************************/
/*! exports provided: memory, __wbg_universe_free, universe_tick, universe_new, universe_generate_organism, universe_clear, universe_width, universe_height, universe_cells, universe_get_cell, universe_toggle_cell, universe_fill_cell, __wbindgen_free, __wbindgen_malloc, __wbindgen_realloc */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./game_of_life_bg.js */ \"../pkg/game_of_life_bg.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/game_of_life_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var game_of_life__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! game_of_life */ \"../pkg/game_of_life.js\");\n/* harmony import */ var game_of_life_game_of_life_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! game_of_life/game_of_life_bg */ \"../pkg/game_of_life_bg.wasm\");\n\r\n\r\n\r\nconst CELL_SIZE = 3;\r\nconst GRID_COLOR = \"#E1E0E7\";\r\nconst DEAD_COLOR = \"#E1E0E7\";\r\nconst ALIVE_COLOR = \"#0D043E\";\r\n\r\nlet universe = game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\r\nconst width = universe.width();\r\nconst height = universe.height();\r\n\r\nconst canvas = document.getElementById(\"game-of-life-canvas\");\r\ncanvas.height = (CELL_SIZE + 1) * height + 1;\r\ncanvas.width = (CELL_SIZE + 1) * width + 1;\r\n\r\nconst ctx = canvas.getContext('2d');\r\n\r\nlet animationId = null;\r\nlet paused = false;\r\nlet speedFactor = 0.166;\r\nlet selectedOrganism = game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"OrganismType\"].Glider;\r\nlet mouseDown = false;\r\nlet painting = false;\r\nlet paintMode = false;\r\n\r\nconst renderLoop = () => {\r\n    if (!paused) {\r\n        setTimeout(() => {\r\n            drawGrid();\r\n            drawCells();\r\n            universe.tick();\r\n            animationId = requestAnimationFrame(renderLoop);\r\n        }, speedFactor * 100);\r\n    }\r\n};\r\n\r\nconst playPauseButton = document.getElementById(\"play-pause\");\r\nconst organismButton = document.getElementById(\"organism\");\r\norganismButton.textContent = \"👾\";\r\nconst clearButton = document.getElementById(\"clear\");\r\nclearButton.textContent = \"❌\";\r\nconst speed = document.getElementById(\"speed\");\r\nconst revertButton = document.getElementById(\"revert\");\r\nrevertButton.textContent = \"⏪\";\r\nconst organismSelect = document.getElementById(\"organisms\");\r\nconst paintButton = document.getElementById(\"paint\");\r\nconst xCoord = document.getElementById(\"xCoord\");\r\nconst yCoord = document.getElementById(\"yCoord\");\r\nconst stepButton = document.getElementById(\"step\");\r\nstepButton.textContent = \"⏭️\";\r\n\r\nconst play = () => {\r\n    paused = false;\r\n    playPauseButton.textContent = \"⏸\";\r\n    renderLoop();\r\n};\r\n\r\nconst pause = () => {\r\n    paused = true;\r\n    playPauseButton.textContent = \"▶\";\r\n    cancelAnimationFrame(animationId);\r\n    animationId = null;\r\n};\r\n\r\nconst paintModeOn = () => {\r\n    paintMode = true;\r\n    paintButton.textContent = \"◻️\";\r\n};\r\n\r\nconst paintModeOff = () => {\r\n    paintMode = false;\r\n    paintButton.textContent = \"🖌️\";\r\n};\r\n\r\nconst drawGrid = () => {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = GRID_COLOR;\r\n\r\n    for (let i = 0; i <= width; i++) {\r\n        ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\r\n        ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1);\r\n    }\r\n\r\n    for (let j = 0; j <= height; j++) {\r\n        ctx.moveTo(0,                           j * (CELL_SIZE + 1) + 1);\r\n        ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1);\r\n    }\r\n\r\n    ctx.stroke();\r\n};\r\n\r\nconst getIndex = (row, column) => {\r\n    return row * width + column;\r\n};\r\n\r\nconst drawCells = () => {\r\n    const cellsPtr = universe.cells();\r\n    const cells = new Uint8Array(game_of_life_game_of_life_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, cellsPtr, width * height);\r\n\r\n    ctx.beginPath();\r\n\r\n    ctx.fillStyle = ALIVE_COLOR;\r\n    for (let row = 0; row < height; row++) {\r\n        for (let col = 0; col < width; col++) {\r\n            const idx = getIndex(row, col);\r\n            if (cells[idx] !== game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Alive) {\r\n                continue;\r\n            }\r\n\r\n            ctx.fillRect(\r\n                col * (CELL_SIZE + 1) + 1,\r\n                row * (CELL_SIZE + 1) + 1,\r\n                CELL_SIZE,\r\n                CELL_SIZE\r\n            );\r\n        }\r\n    }\r\n\r\n    ctx.fillStyle = DEAD_COLOR;\r\n    for (let row = 0; row < height; row++) {\r\n        for (let col = 0; col < width; col++) {\r\n            const idx = getIndex(row, col);\r\n            if (cells[idx] !== game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Dead) {\r\n                continue;\r\n            }\r\n\r\n            ctx.fillRect(\r\n                col * (CELL_SIZE + 1) + 1,\r\n                row * (CELL_SIZE + 1) + 1,\r\n                CELL_SIZE,\r\n                CELL_SIZE\r\n            );\r\n        }\r\n    }\r\n\r\n    ctx.stroke();\r\n};\r\n\r\nfunction paintPixel(event) {\r\n    const boundingRect = canvas.getBoundingClientRect();\r\n    const scaleX = canvas.width / boundingRect.width;\r\n    const scaleY = canvas.height / boundingRect.height;\r\n    const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\r\n    const canvasTop = (event.clientY - boundingRect.top) * scaleY;\r\n    const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1);\r\n    const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1);\r\n    if (row >= 0 && row < height && col >= 0 && col < width) {\r\n        if (paintMode && painting) {\r\n            pause();\r\n            universe.fill_cell(row, col);\r\n            drawCells();\r\n        } else if (paintMode && !painting) {\r\n            pause();\r\n            universe.toggle_cell(row, col);\r\n            drawCells();\r\n        } else {\r\n            xCoord.value = col;\r\n            yCoord.value = row;\r\n        }\r\n    }\r\n}\r\n\r\nplayPauseButton.addEventListener(\"click\", event => {\r\n    if (paused) {\r\n        play();\r\n    } else {\r\n        pause();\r\n    }\r\n});\r\n\r\npaintButton.addEventListener(\"click\", event => {\r\n    if (paintMode) {\r\n        paintModeOff();\r\n    } else {\r\n        paintModeOn();\r\n    }\r\n});\r\n\r\nclearButton.addEventListener(\"click\", event => {\r\n    universe.clear();\r\n    drawGrid();\r\n    drawCells();\r\n});\r\n\r\nrevertButton.addEventListener(\"click\", event => {\r\n    universe = game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\r\n    drawGrid();\r\n    drawCells();\r\n});\r\n\r\nstepButton.addEventListener(\"click\", event => {\r\n    pause();\r\n    universe.tick();\r\n    drawGrid();\r\n    drawCells();\r\n});\r\n\r\norganismButton.addEventListener(\"click\", event => {\r\n    universe.generate_organism(selectedOrganism, parseInt(yCoord.value), parseInt(xCoord.value));\r\n    if (paused) {\r\n        play();\r\n    }\r\n});\r\n\r\nxCoord.addEventListener(\"input\", event => {\r\n    if (event.target.value >= 0 && event.target.value < (width - 1)) {\r\n        xCoord.value = event.target.value;\r\n    } else {\r\n        xCoord.value = width - 1;\r\n    }\r\n});\r\n\r\nyCoord.addEventListener(\"input\", event => {\r\n    if (event.target.value >= 0 && event.target.value < (height - 1)) {\r\n        yCoord.value = event.target.value;\r\n    } else {\r\n        yCoord.value = height - 1;\r\n    }\r\n});\r\n\r\nspeed.addEventListener(\"input\", event => {\r\n    speedFactor = 1 / event.target.value;\r\n});\r\n\r\norganismSelect.addEventListener(\"change\", event => {\r\n    selectedOrganism = game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"OrganismType\"][event.target.value];\r\n});\r\n\r\ncanvas.addEventListener(\"mousedown\", event => {\r\n    mouseDown = true;\r\n    paintPixel(event);\r\n});\r\n\r\ncanvas.addEventListener(\"mousemove\", event => {\r\n    if(paintMode && mouseDown) {\r\n        painting = true;\r\n        paintPixel(event);\r\n    }\r\n});\r\n\r\ncanvas.addEventListener(\"mouseup\", event => {\r\n    mouseDown = false;\r\n    painting = false;\r\n});\r\n\r\ncanvas.addEventListener(\"mouseleave\", event => {\r\n    painting = false;\r\n});\r\n\r\ncanvas.addEventListener(\"mouseenter\", event => {\r\n    if(paintMode && mouseDown) {\r\n        painting = true;\r\n        paintPixel(event);\r\n    }\r\n});\r\n\r\nfunction setCoordsDefaults() {\r\n    xCoord.value = 50;\r\n    xCoord.min = 0;\r\n    xCoord.max = width - 1;\r\n    yCoord.value = 50;\r\n    yCoord.min = 0;\r\n    yCoord.max = height - 1;\r\n}\r\n\r\nfunction domReady(fn) {\r\n    document.addEventListener(\"DOMContentLoaded\", fn);\r\n    if (document.readyState === \"interactive\" || document.readyState === \"complete\" ) {\r\n        fn();\r\n    }\r\n}\r\n\r\ndomReady(() => {\r\n    for (let organismType in game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"OrganismType\"]) {\r\n        if (isNaN(organismType)) {\r\n            let option = document.createElement(\"option\");\r\n            option.text = organismType;\r\n            option.value = organismType;\r\n            organismSelect.add(option);\r\n        }\r\n    }\r\n    setCoordsDefaults();\r\n});\r\n\r\nplay();\r\npaintModeOff();\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?");

/***/ })

}]);